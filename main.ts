//% color=#0fbc11 icon="\uf1eb" block="ESP8266 AT Full"
namespace ESP8266AT {
    let txPin: SerialPin = SerialPin.P0
    let rxPin: SerialPin = SerialPin.P1
    let serialInited = false

    //% block="‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡∏≤ Serial TX: %tx RX: %rx"
    //% tx.fieldEditor="gridpicker" rx.fieldEditor="gridpicker"
    //% group="üõ† ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≠‡∏£‡πå‡∏ï"
    export function setSerialPins(tx: SerialPin, rx: SerialPin): void {
        txPin = tx; rxPin = rx
        serial.redirect(txPin, rxPin, BaudRate.BaudRate115200)
        serial.setRxBufferSize(256)
        serialInited = true
    }

    function initSerial(): void {
        if (!serialInited) {
            serial.redirect(txPin, rxPin, BaudRate.BaudRate115200)
            serial.setRxBufferSize(256)
            serialInited = true
        }
    }

    //% block="‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á AT: %cmd"
    //% group="üõ† ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≠‡∏£‡πå‡∏ï"
    export function sendAT(cmd: string): void {
        initSerial()
        serial.writeString(cmd + "\r\n")
    }

    //% block="‡∏™‡πà‡∏á AT %cmd ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏≠ %delay ‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"
    //% group="üõ† ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≠‡∏£‡πå‡∏ï"
    export function sendAndWait(cmd: string, delay: number): string {
        initSerial()
        serial.writeString(cmd + "\r\n")
        basic.pause(delay)
        return serial.readString()
    }

    //% block="‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å ESP"
    //% group="üõ† ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≠‡∏£‡πå‡∏ï"
    export function readResponse(): string {
        initSerial()
        return serial.readString()
    }

    // UART
    //% block="‡∏ï‡∏±‡πâ‡∏á UART baud:%baud databits:%db stopbits:%sb parity:%par flowctl:%fc"
    //% group="üõ† UART"
    export function setUART(baud: number, db: number, sb: number, par: number, fc: number): void {
        sendAT(`AT+UART=${baud},${db},${sb},${par},${fc}`)
    }
    //% block="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ UART"
    //% group="üõ† UART"
    export function queryUART(): void {
        sendAT(`AT+UART?`)
    }

    // Wi‚ÄëFi
    //% block="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏´‡∏°‡∏î Wi‚ÄëFi"
    //% group="üì° Wi-Fi"
    export function queryMode(): void { sendAT("AT+CWMODE?") }
    //% block="‡∏ï‡∏±‡πâ‡∏á‡πÇ‡∏´‡∏°‡∏î Wi‚ÄëFi ‡πÄ‡∏õ‡πá‡∏ô %mode"
    //% mode.min=1 mode.max=3
    //% group="üì° Wi-Fi"
    export function setMode(mode: number): void { sendAT(`AT+CWMODE=${mode}`) }
    //% block="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Wi‚ÄëFi"
    //% group="üì° Wi-Fi"
    export function queryAP(): void { sendAT("AT+CWJAP?") }
    //% block="‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Wi‚ÄëFi SSID: %ssid ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô: %pwd"
    //% ssid.shadow="text" pwd.shadow="text"
    //% group="üì° Wi-Fi"
    export function connectAP(ssid: string, pwd: string): void { sendAT(`AT+CWJAP_CUR="${ssid}","${pwd}"`) }
    //% block="‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Wi‚ÄëFi"
    //% group="üì° Wi-Fi"
    export function disconnectAP(): void { sendAT("AT+CWQAP") }
    //% block="‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏≤ Wi‚ÄëFi"
    //% group="üì° Wi-Fi"
    export function scanAP(): void { sendAT("AT+CWLAP") }
    //% block="‡∏ï‡∏±‡πâ‡∏á Access Point SSID: %ssid ‡∏£‡∏´‡∏±‡∏™: %pwd channel: %ch encryption: %enc"
    //% group="üì° Wi-Fi"
    export function setAP(ssid: string, pwd: string, ch: number, enc: number): void {
        sendAT(`AT+CWSAP="${ssid}","${pwd}",${ch},${enc}`)
    }
    //% block="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ AP ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"
    //% group="üì° Wi-Fi"
    export function queryAPConfig(): void { sendAT(`AT+CWSAP?`) }
    //% block="‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ Client ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°"
    //% group="üì° Wi-Fi"
    export function listClients(): void { sendAT("AT+CWLIF") }

    // IP & DHCP
    //% block="‡πÅ‡∏™‡∏î‡∏á IP Address"
    //% group="üåê IP & DHCP"
    export function queryIP(): void { sendAT("AT+CIFSR") }
    //% block="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ IP"
    //% group="üåê IP & DHCP"
    export function queryIPConfig(): void { sendAT("AT+CIPSTA?") }
    //% block="‡∏ï‡∏±‡πâ‡∏á IP: %ip Gateway: %gw Netmask: %nm"
    //% ip.shadow="text" gw.shadow="text" nm.shadow="text"
    //% group="üåê IP & DHCP"
    export function setStaticIP(ip: string, gw: string, nm: string): void {
        sendAT(`AT+CIPSTA="${ip}","${gw}","${nm}"`)
    }
    //% block="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö DHCP"
    //% group="üåê IP & DHCP"
    export function queryDHCP(): void { sendAT("AT+CWDHCP?") }
    //% block="‡∏ï‡∏±‡πâ‡∏á DHCP mode:%mode enable:%en"
    //% group="üåê IP & DHCP"
    export function setDHCP(mode: number, en: number): void {
        sendAT(`AT+CWDHCP=${mode},${en}`)
    }

    // TCP/IP
    //% block="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏´‡∏°‡∏î multiple connection"
    //% group="üåê TCP/IP"
    export function queryMux(): void { sendAT("AT+CIPMUX?") }
    //% block="‡∏ï‡∏±‡πâ‡∏á multiple connection ‡πÄ‡∏õ‡πá‡∏ô %m (0/1)"
    //% group="üåê TCP/IP"
    export function setMux(m: number): void { sendAT(`AT+CIPMUX=${m}`) }
    //% block="‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° TCP ‡πÑ‡∏õ‡∏¢‡∏±‡∏á IP: %ip ‡∏û‡∏≠‡∏£‡πå‡∏ï: %port"
    //% group="üåê TCP/IP"
    export function startTCP(ip: string, port: number): void {
        sendAT(`AT+CIPSTART="TCP","${ip}",${port}`)
    }
    //% block="‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° UDP ‡πÑ‡∏õ‡∏¢‡∏±‡∏á IP: %ip ‡∏û‡∏≠‡∏£‡πå‡∏ï: %port"
    //% group="üåê TCP/IP"
    export function startUDP(ip: string, port: number): void {
        sendAT(`AT+CIPSTART="UDP","${ip}",${port}`)
    }
    //% block="‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° ID: %id prot: %proto IP: %ip ‡∏û‡∏≠‡∏£‡πå‡∏ï: %port"
    //% group="üåê TCP/IP"
    export function startID(id: number, proto: string, ip: string, port: number): void {
        sendAT(`AT+CIPSTART=${id},"${proto}","${ip}",${port}`)
    }
    //% block="‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏ô‡∏≤‡∏î: %len byte"
    //% group="üåê TCP/IP"
    export function sendLen(len: number): void { sendAT(`AT+CIPSEND=${len}`) }
    //% block="‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ID: %id ‡∏Ç‡∏ô‡∏≤‡∏î: %len byte"
    //% group="üåê TCP/IP"
    export function sendLenID(id: number, len: number): void { sendAT(`AT+CIPSEND=${id},${len}`) }
    //% block="‡∏õ‡∏¥‡∏î connection"
    //% group="üåê TCP/IP"
    export function closeConn(): void { sendAT("AT+CIPCLOSE") }
    //% block="‡∏õ‡∏¥‡∏î ID connection: %id"
    //% group="üåê TCP/IP"
    export function closeConnID(id: number): void { sendAT(`AT+CIPCLOSE=${id}`) }
    //% block="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ connection"
    //% group="üåê TCP/IP"
    export function connStatus(): void { sendAT("AT+CIPSTATUS") }
    //% block="‡∏ï‡∏±‡πâ‡∏á‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: %m"
    //% group="üåê TCP/IP"
    export function setRecvMode(m: number): void { sendAT(`AT+CIPRECVMODE=${m}`) }
    //% block="‡∏ï‡∏±‡πâ‡∏á Transparent mode: %m"
    //% group="üåê TCP/IP"
    export function setModeTransparent(m: number): void { sendAT(`AT+CIPMODE=${m}`) }

    // Server
    //% block="‡πÄ‡∏õ‡∏¥‡∏î Server ‡∏û‡∏≠‡∏£‡πå‡∏ï: %port"
    //% group="üì° Server"
    export function enableServer(port: number): void { sendAT(`AT+CIPSERVER=1,${port}`) }
    //% block="‡∏õ‡∏¥‡∏î Server"
    //% group="üì° Server"
    export function disableServer(): void { sendAT("AT+CIPSERVER=0") }
    //% block="‡∏ï‡∏±‡πâ‡∏á Server timeout: %sec ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"
    //% group="üì° Server"
    export function serverTimeout(sec: number): void { sendAT(`AT+CIPSTO=${sec}`) }

    // DNS & Ping
    //% block="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö DNS"
    //% group="üåê DNS & Ping"
    export function queryDNS(): void { sendAT("AT+CDNSCFG?") }
    //% block="‡∏ï‡∏±‡πâ‡∏á DNS d1: %d1 d2: %d2"
    //% group="üåê DNS & Ping"
    export function setDNS(d1: string, d2: string): void { sendAT(`AT+CDNSCFG="${d1}","${d2}"`) }
    //% block="Ping host: %host"
    //% group="üåê DNS & Ping"
    export function pingHost(host: string): void { sendAT(`AT+PING="${host}"`) }

    // Power & RF
    //% block="‡∏ï‡∏±‡πâ‡∏á Sleep mode: %mode (0=off 1=light 2=modem)"
    //% group="‚ö° Power & RF"
    export function setSleep(mode: number): void { sendAT(`AT+SLEEP=${mode}`) }
    //% block="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö RF power"
    //% group="‚ö° Power & RF"
    export function queryRF(): void { sendAT("AT+RFPOWER?") }
    //% block="‡∏ï‡∏±‡πâ‡∏á RF power: %level"
    //% group="‚ö° Power & RF"
    export function setRF(level: number): void { sendAT(`AT+RFPOWER=${level}`) }

    // System
    //% block="‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÇ‡∏°‡∏î‡∏π‡∏•"
    //% group="‚öôÔ∏è System"
    export function resetModule(): void { sendAT("AT+RST") }
    //% block="‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô"
    //% group="‚öôÔ∏è System"
    export function restoreFactory(): void { sendAT("AT+RESTORE") }
    //% block="‡∏î‡∏π‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ü‡∏¥‡∏£‡πå‡∏°‡πÅ‡∏ß‡∏£‡πå"
    //% group="‚öôÔ∏è System"
    export function queryVersion(): void { sendAT("AT+GMR") }
    //% block="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö RAM"
    //% group="‚öôÔ∏è System"
    export function queryRAM(): void { sendAT("AT+SYSRAM?") }
    //% block="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Flash"
    //% group="‚öôÔ∏è System"
    export function queryFlash(): void { sendAT("AT+SYSFLASH?") }
    //% block="‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏ü‡∏¥‡∏£‡πå‡∏°‡πÅ‡∏ß‡∏£‡πå OTA"
    //% group="‚öôÔ∏è System"
    export function otaUpdate(): void { sendAT("AT+CIUPDATE") }
    //% block="‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö SysMsg: %level"
    //% group="‚öôÔ∏è System"
    export function setSysMsg(level: number): void { sendAT(`AT+SYSMSG=${level}`) }

    // SmartConfig
    //% block="‡πÄ‡∏£‡∏¥‡πà‡∏° SmartConfig"
    //% group="üß† SmartConfig"
    export function startSmartConfig(): void { sendAT("AT+SMARTSTART") }
    //% block="‡∏´‡∏¢‡∏∏‡∏î SmartConfig"
    //% group="üß† SmartConfig"
    export function stopSmartConfig(): void { sendAT("AT+SMARTSTOP") }
}